#ifndef PARSER_H
#define PARSER_H

/* Predictive Parser LL(1)
*   Is able to determine if a string is generated by a LL(1) grammar (left-to-right, left-most derivation, 1-symbol lookahead).
*   
*/

/* Recognized grammar (Pascal subset):
*
S ::= PROGRAM ID ; Bloco .
Bloco ::= BlocoVl BlocoCodl BEGIN ComandoSemi END
BlocoVl ::= VAR Idcomma : Tipo ; BlocoVl'
BlocoVl ::= ''
BlocoVl' ::= Idcomma : Tipo ; BlocoVl'
BlocoVl' ::= ''
Idcomma ::= ID Idcomma'
Idcomma' ::= , ID Idcomma'
Idcomma' ::= ''
BlocoCodl ::= Proc SemiBSemi BlocoCodl
BlocoCodl ::= Func SemiBSemi BlocoCodl
BlocoCodl ::= ''
Proc ::= PROCEDURE ID Pf
Func ::= FUNCTION ID Pf : ID
SemiBSemi ::= ; Bloco ;
ComandoSemi ::= Comando ComandoSemi'
ComandoSemi' ::= ; Comando ComandoSemi'
ComandoSemi' ::= ''
Tipo ::= ID
Tipo ::= ARRAY [ TipoL ] OF Tipo
TipoL ::= Cons .. Cons TipoL'
TipoL' ::= , Cons .. Cons TipoL'
TipoL' ::= ''
Pf ::= ( PfL )
Pf ::= ''
PfL ::= Opvar Idcomma : ID PfL'
Opvar ::= VAR
Opvar ::= ''
PfL' ::= ; Opvar Idcomma : ID PfL'
PfL' ::= ''
Comando ::= ID Comando'
Comando' ::= VarL := Exp
Comando' ::= OpParenExp
Comando ::= BEGIN ComandoSemi END
Comando ::= IF Exp THEN BEGIN ComandoSemi END Opelse
Comando ::= WHILE Exp DO Comando
Comando ::= ''
OpParenExp ::= ( Expcomma )
OpParenExp ::= ''
Expcomma ::= Exp Expcomma'
Expcomma' ::= , Exp Expcomma'
Expcomma' ::= ''
Opelse ::= ELSE BEGIN ComandoSemi END 
Opelse ::= ''
Opr ::= =
Opr ::= <>
Opr ::= <
Opr ::= <=
Opr ::= >=
Opr ::= >
Exp ::= Exps Exp'
Exp' ::= Opr Exps Exp'
Exp' ::= ''
Exps ::= Sign Termo ExpsL
Sign ::= +
Sign ::= -
Sign ::= ''
ExpsL ::= SignOr Termo ExpsL 
ExpsL ::= ''
SignOr ::= +
SignOr ::= -
SignOr ::= OR
Termo ::= Fator TermoL
TermoL ::= TermoOps Fator TermoL
TermoL ::= ''
TermoOps ::= *
TermoOps ::= DIV
TermoOps ::= AND
Fator ::= ID Fator'
Fator' ::= VarL
Fator' ::= ( OpExpComma )
Fator ::= NUMERO
Fator ::= ( Exp )
Fator ::= NOT Fator
OpExpComma ::= Expcomma
OpExpComma ::= ''
Variavel ::= ID VarL
VarL ::= [ Expcomma ] VarL
VarL ::= ''
Cons ::= Sign NUMERO
*
*/

int parse();

#endif